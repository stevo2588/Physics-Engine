#include <Triangle.h>
#include <cmath>

Triangle::Triangle(const Vector3D& norm, Vector3D p0, Vector3D p1, Vector3D p2, const Vector2D uv0, const Vector2D uv1, const Vector2D uv2, std::string name)
   : Shape(name), normal(norm), p0(p0), p1(p1), p2(p2), uv0(uv0), uv1(uv1), uv2(uv2)
{
   v0 = p1 - p0;
   v1 = p2 - p0;
   d00 = v0.dotProduct(v0);
   d01 = v0.dotProduct(v1);
   d11 = v1.dotProduct(v1);
   denom = d00 * d11 - d01 * d01;
}

Triangle::Triangle(Vector3D p0, Vector3D p1, Vector3D p2, const Vector2D uv0, const Vector2D uv1, const Vector2D uv2, std::string name)
   : Shape(name), p0(p0), p1(p1), p2(p2), uv0(uv0), uv1(uv1), uv2(uv2)
{
   v0 = p1 - p0;
   v1 = p2 - p0;
   Vector3D v2 = v0.crossProduct(v1);
   //Vector3D v2 = v1.crossProduct(v0);
   //std::cout << v0.toString() << " x " << v1.toString() << " = " << v2.toString() << std::endl;
   normal = v2.normalize();
   //std::cout << "normals " << normal.toString() << std::endl;
   d00 = v0.dotProduct(v0);
   d01 = v0.dotProduct(v1);
   d11 = v1.dotProduct(v1);
   denom = d00 * d11 - d01 * d01;
}

bool Triangle::intersection(const Ray& r, Hit *h) const {
   //std::cout << this->p0.toString() << "," << this->p1.toString() << "," << this->p2.toString() << std::endl;
   float baryUpper = 1.0001;
   float baryLower = 0.9999;

   Vector3D cameraToPlane = p0 - r.src;

   h->distance = (this->normal.dotProduct(cameraToPlane))/(this->normal.dotProduct(r.dir));
   if(h->distance < 0) return false;

   // Cramer's rule, using barycentric coordinates
   Vector3D p = r.src + r.dir*(h->distance); // calc intersection point on plane
   Vector3D v2 = p - p0;
   float d20 = v2.dotProduct(v0);
   float d21 = v2.dotProduct(v1);

   float w1 = (d11 * d20 - d01 * d21) / denom;
   if(w1 < 0 || w1 > 1) return false;

   float w2 = (d00 * d21 - d01 * d20) / denom;
   if(w2 < 0 || w2 > 1) return false;

   float w0 = 1.0f - w1 - w2;
   if(w0 < 0 || w0 > 1) return false;

   h->normal = this->normal;

   float barySum = w0 + w1 + w2;
   if(barySum > baryLower && barySum < baryUpper) {
      double u = w0*uv0.elements[0] + w1*uv1.elements[0] + w2*uv2.elements[0];
      double v = w0*uv0.elements[1] + w1*uv1.elements[1] + w2*uv2.elements[1];
      h->uv = Vector2D(u,v);

      //h->sh = this; // TODO: Not necessary...

      return true;
   }

   return false;
}

// http://www.flipcode.com/archives/Raytracing_Topics_Techniques-Part_7_Kd-Trees_and_More_Speed.shtml
bool Triangle::boxIntersection(const Box& box) const {
   Vector3D a_BoxCentre = box.getCenter();
   Vector3D a_BoxHalfsize = box.getSize()/2;

   Vector3D v0, v1, v2, /*normal, */e0, e1, e2;
	float theMin, theMax, p0, p1, p2, rad, fex, fey, fez;
	v0 = this->p0 - a_BoxCentre;
	v1 = this->p1 - a_BoxCentre;
	v2 = this->p2 - a_BoxCentre;
	e0 = v1 - v0, e1 = v2 - v1, e2 = v0 - v2;
	fex = fabsf( e0.elements[0] );
	fey = fabsf( e0.elements[1] );
	fez = fabsf( e0.elements[2] );
	AXISTEST_X01( e0.elements[2], e0.elements[1], fez, fey );
	AXISTEST_Y02( e0.elements[2], e0.elements[0], fez, fex );
	AXISTEST_Z12( e0.elements[1], e0.elements[0], fey, fex );
	fex = fabsf( e1.elements[0] );
	fey = fabsf( e1.elements[1] );
	fez = fabsf( e1.elements[2] );
	AXISTEST_X01( e1.elements[2], e1.elements[1], fez, fey );
	AXISTEST_Y02( e1.elements[2], e1.elements[0], fez, fex );
	AXISTEST_Z0 ( e1.elements[1], e1.elements[0], fey, fex );
	fex = fabsf( e2.elements[0] );
	fey = fabsf( e2.elements[1] );
	fez = fabsf( e2.elements[2] );
	AXISTEST_X2 ( e2.elements[2], e2.elements[1], fez, fey );
	AXISTEST_Y1 ( e2.elements[2], e2.elements[0], fez, fex );
	AXISTEST_Z12( e2.elements[1], e2.elements[0], fey, fex );
   FINDMINMAX( v0.elements[0], v1.elements[0], v2.elements[0], theMin, theMax );
	if (theMin > a_BoxHalfsize.elements[0] || theMax < -a_BoxHalfsize.elements[0]) return false;
	FINDMINMAX( v0.elements[1], v1.elements[1], v2.elements[1], theMin, theMax );
	if (theMin > a_BoxHalfsize.elements[1] || theMax < -a_BoxHalfsize.elements[1]) return false;
	FINDMINMAX( v0.elements[2], v1.elements[2], v2.elements[2], theMin, theMax );
	if (theMin > a_BoxHalfsize.elements[2] || theMax < -a_BoxHalfsize.elements[2]) return false;
	//normal = e0.crossProduct( e1 );
	if (!PlaneBoxOverlap( normal, v0, a_BoxHalfsize )) return false;
	return true;
}

void Triangle::getAxisExtremes(float& left, float& right, unsigned int axis ) const {
   left = p0.elements[axis];
   right = p0.elements[axis];

   if (p1.elements[axis] < left) left = p1.elements[axis];
   else if (p1.elements[axis] > right) right = p1.elements[axis];

   if (p2.elements[axis] < left) left = p2.elements[axis];
   else if (p2.elements[axis] > right) right = p2.elements[axis];
}

// get positions on axis within range
std::vector<double> Triangle::getAxisPositionsInRange(double pos1, double pos2, unsigned int axis) const {
   std::vector<double> candidates;

   double p = this->p0.elements[axis];
   if ((p > pos1) && (p < pos2)) candidates.push_back(p);

   p = this->p1.elements[axis];
   if ((p > pos1) && (p < pos2)) candidates.push_back(p);

   p = this->p2.elements[axis];
   if ((p > pos1) && (p < pos2)) candidates.push_back(p);

   return candidates;
}

